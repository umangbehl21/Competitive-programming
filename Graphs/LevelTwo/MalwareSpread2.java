import java.util.*;
public class MalwareSpread2 {
    public static int Malwarespread2(int graph[][],int initial[])
    {
        int n = graph.length;
        int mincount = n + 1;
        int nodeRemoved = -1;
        Arrays.sort(initial);
        for(int nodeToremove : initial)
        {
            HashSet<Integer> vis = new HashSet<>();
            vis.add(nodeToremove);
            int count = 0;
            for(int infectednode : initial)
            {
                dfs(infectednode, vis, graph, count);
            }
            if(mincount > count)
            {
                mincount = count;
                nodeRemoved = nodeToremove;
            }
        }
        return nodeRemoved;
    }
    public static void dfs(int node,HashSet<Integer> vis,int graph[][],int count)
    {
        if(vis.contains(node))  //removing one infected node and depending on the other infected node that how many node it can infect will be the answer for that node
        {
            return;
        }
        count++;
        vis.add(node);
        for(int nbr = 0;nbr<graph.length;nbr++)
        {
            if(graph[node][nbr] == 1 && node != nbr)
            {
                dfs(nbr,vis,graph,count);
            }
        }
        return;

    }
}
